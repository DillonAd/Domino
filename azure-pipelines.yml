name: $(Build.BuildId)
trigger:
  - master
pr:
  - master
variables:
  Artifact.Prod: NuGet

stages:
  - stage: Build
    jobs:
      - job: Build
        pool: Default
        variables:
            buildConfiguration: 'Release'
            Parameters.Solution: '$(Build.SourcesDirectory)/domino.sln'
        steps:
          - task: DotNetCoreInstaller@0
            inputs:
              version: 3.1.302
  
          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: restore
              projects: '$(Parameters.Solution)'
  
          - task: SonarCloudPrepare@1
            displayName: 'Prepare analysis on SonarCloud'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              SonarCloud: Domino
              organization: 'dillonad-github'
              scannerMode: 'MSBuild'
              projectKey: 'DillonAd_Domino'
              projectName: Domino
              extraProperties: 'sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/opencover.xml'
  
          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              projects: '$(Parameters.Solution)'
              arguments: '--configuration $(BuildConfiguration) --no-restore'
  
          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: test
              projects: '$(Build.SourcesDirectory)/Tests/domino.Test.Unit/domino.Test.Unit.csproj'
              arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/opencover.xml /p:Exclude="[xunit.*]*"'

          - task: SonarCloudAnalyze@1
            displayName: 'Run Code Analysis'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      
          - task: SonarCloudPublish@1
            displayName: 'Publish Quality Gate Result'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              pollingTimeoutSec: '300'

          - task: DotNetCoreCLI@2
            displayName: Pack
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              command: pack
              projects: '$(Parameters.Solution)'
              arguments: '--no-build --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'

          - publish: '$(Build.ArtifactStagingDirectory)'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            artifact: '$(Artifact.Prod)'

  - stage: Deploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - deployment: NuGet
        pool: 'Hosted VS2017'
        environment: Production
        strategy:
          runOnce:
            deploy:
              steps:
                - task: NuGetToolInstaller@0

                - task: NuGetCommand@2
                  displayName: 'NuGet Push'
                  inputs:
                    command: push
                    nuGetFeedType: external
                    publishFeedCredentials: DillonAd
                    packagesToPush: '$(Pipeline.Workspace)/$(Artifact.Prod)/*.nupkg'
